/* Input Format:
   The first line contains an integer N and a string (ascending or descending), which means the number of students in the class and the 
   order which grade are sorting in respectively.
   In the following N lines, there are 5 integers: student ID, Chinese grade, English grade, math grade, and science grade in each line
   in order, which are separate by spaces.  */

#include <stdio.h>
#include <stdlib.h>

typedef struct {
   int ID;
   int Chinese, English, math, science;
   int total;
} Grade;

void sortGrade(Grade * gList, int n, char * order);

int main(void)
{
    int n, i;
    char order[20];
    Grade gradeList[1000];
    scanf("%d%s", &n, order);
    for (i = 0; i < n; i++)
        scanf("%d%d%d%d%d", &gradeList[i].ID, &gradeList[i].Chinese,&gradeList[i].English, &gradeList[i].math, &gradeList[i].science);
    sortGrade(gradeList, n, order);
    for (i = 0; i < n; i++)
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", gradeList[i].ID, gradeList[i].total,gradeList[i].Chinese, gradeList[i].English,gradeList[i].math, gradeList[i].science);
    return 0;
}

int cmp_descend(const void * a, const void * b)
{
    Grade * pa = (Grade *) a;
    Grade * pb = (Grade *) b;
    if (pa->total > pb->total) return -1;
    else if (pa->total < pb->total) return 1;
    else {
        if (pa->Chinese > pb->Chinese) return -1;
        else if (pa->Chinese < pb->Chinese) return 1;
        else {
            if (pa->English > pb->English) return -1;
            else if (pa->English < pb->English) return 1;
            else {
                if (pa->math > pb->math) return -1;
                else if (pa->math < pb->math) return 1;
                else {
                    if (pa->science > pb->science) return -1;
                    else if (pa->science < pb->science) return 1;
                    else {
                        if (pa->ID > pb->ID) return 1;
                        else if (pa->ID < pb->ID) return -1;
                        else return 0;
                    }
                }
            }
        }
    }
}

int cmp_ascend(const void * a, const void * b)
{
    Grade * pa = (Grade *) a;
    Grade * pb = (Grade *) b;
    if (pa->total > pb->total) return 1;
    else if (pa->total < pb->total) return -1;
    else {
        if (pa->Chinese > pb->Chinese) return 1;
        else if (pa->Chinese < pb->Chinese) return -1;
        else {
            if (pa->English > pb->English) return 1;
            else if (pa->English < pb->English) return -1;
            else {
                if (pa->math > pb->math) return 1;
                else if (pa->math < pb->math) return -1;
                else {
                    if (pa->science > pb->science) return 1;
                    else if (pa->science < pb->science) return -1;
                    else {
                        if (pa->ID > pb->ID) return 1;
                        else if (pa->ID < pb->ID) return -1;
                        else return 0;
                    }
                }
            }
        }
    }
}

void sortGrade(Grade * gList, int n, char * order)
{
    for (int i = 0; i < n; i++) {
        gList[i].total = gList[i].Chinese + gList[i].English + gList[i].math + gList[i].science;
    }
    if (order[0] == 'd') {
        qsort(gList, n, sizeof(Grade), cmp_descend);
    }
    else if (order[0] == 'a') {
        qsort(gList, n, sizeof(Grade), cmp_ascend);
    }
}
